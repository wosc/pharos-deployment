exim_path = /usr/sbin/exim4
CONFDIR = /etc/exim4
spool_directory = /var/spool/exim4
hide mysql_servers = localhost/mailserver/mail/<%=node['mailserver']['db_pass']%>

# OpenVZ sets random hostname on boot so we can't rely on the built-in
# $primary_hostname lookup. NOTE: This is used as HELO with remote SMTP servers,
# so the reverse lookup of our IP must be this name, because most check for this.
primary_hostname = pharos.wosc.de
# This serves double-duty:
# 1. specific hostname to hang mysql-based mailboxes onto
# 2. It's the MX, so someone might want to send us mail there.
VIRTUAL_MAILBOX_HOSTNAME = mail.wosc.de

# the mysql-lookup returns results with more than one row as newline-separated
# list which is then translated to a normal exim-domain-list (separator ":")
domainlist local_domains = localhost:$primary_hostname:VIRTUAL_MAILBOX_HOSTNAME \
   : ${tr{${lookup mysql{SELECT name FROM domains WHERE is_mx = 1}}}{\n}{:}} \
   : dsearch;/etc/exim4/domains

domainlist relay_to_domains =
hostlist relay_from_hosts = 127.0.0.1 : ::::1
never_users = root

# wosc: this ident thingy eats too much time on connect, disable it
rfc1413_query_timeout = 0s
# From the default config file: perform reverse lookup on helo/ehlo
host_lookup = *

# wosc: amount of characters in $mesage_body for filter files
message_body_visible = 5000
system_filter = /etc/exim4/system-filter
system_filter_pipe_transport = address_pipe
system_filter_user = Debian-exim

# Message size limit. The default is 50 MB
#message_size_limit = XXX

tls_advertise_hosts = *
tls_certificate = /srv/letsencrypt/data/mail.wosc.de/fullchain.pem
tls_privatekey = /srv/letsencrypt/data/mail.wosc.de/key.pem

# unfreeze frozen bounce messages after two days, try once more to
# deliver them, and ignore any delivery failures
ignore_bounce_errors_after = 2d
# cancel frozen messages that are older than a week
timeout_frozen_after = 7d
freeze_tell = postmaster@localhost
keep_environment =

av_scanner = clamd:/var/run/clamav/clamd.ctl

acl_smtp_rcpt = acl_check_rcpt
acl_smtp_data = acl_check_data

begin acl
#------------------------------------------------------------
acl_check_rcpt:
  # Accept if the source is local SMTP (i.e. not over TCP/IP). We do this by
  # testing for an empty sending host field.
  accept
    hosts = :

  # The following section of the ACL is concerned with local parts that contain
  # certain non-alphanumeric characters. Dots in unusual places are
  # handled by this ACL as well.
  #
  # Non-alphanumeric characters other than dots are rarely found in genuine
  # local parts, but are often tried by people looking to circumvent
  # relaying restrictions. Therefore, although they are valid in local
  # parts, these rules disallow certain non-alphanumeric characters, as
  # a precaution.
  #
  # Empty components (two dots in a row) are not valid in RFC 2822, but Exim
  # allows them because they have been encountered. (Consider local parts
  # constructed as "firstinitial.secondinitial.familyname" when applied to
  # a name without a second initial.) However, a local part starting
  # with a dot or containing /../ can cause trouble if it is used as part of a
  # file name (e.g. for a mailing list). This is also true for local parts that
  # contain slashes. A pipe symbol can also be troublesome if the local part is
  # incorporated unthinkingly into a shell command line.
  #
  # Two different rules are used. The first one has a quite strict
  # default, and is applied to messages that are addressed to one of the
  # local domains handled by this host.
  # If you have local accounts that include strange characters, you can
  # use the macro provided to change the ACL range or to disable the
  # check completely.
  deny
    domains = +local_domains
    local_parts = ^[.] : ^.*[@%!/|\'`#&?]
    message = restricted characters in address

  # The second rule applies to all other domains, and its default is
  # considerably less strict. It blocks local parts that begin with a dot,
  # slash, or vertical bar, but allows these characters within the local part.
  # However, the sequence /../ is barred. The use of some other non-alphanumeric
  # characters is blocked. The motivation here is to prevent your users (or your
  # users' viruses) from mounting certain kinds of attack on remote sites.
  # wosc: removed '%' which is used in GMX lists
  deny
    domains = !+local_domains
    local_parts = ^[./|] : ^.*[@!\'`#&?] : ^.*/\\.\\./
    message = restricted characters in address

  # Accept mail to postmaster in any local domain
  accept
    local_parts = postmaster
    domains = +local_domains


  ### If control reaches this point, the domain is neither in +local_domains
  ### nor in +relay_to_domains.

  # Accept if the message comes from one of the hosts for which we are an
  # outgoing relay.
  accept
    hosts = +relay_from_hosts

  # Accept if the message arrived over an authenticated connection
  accept
    authenticated = *
    control = submission/sender_retain

  # Insist that any other recipient address that we accept is either in one of
  # our local domains, or is in a domain for which we explicitly allow
  # relaying. Any other domain is rejected as being unacceptable for relaying.
  require
    message = relay not permitted
    domains = +local_domains : +relay_to_domains

  # We also require all accepted addresses to be verifiable. This check will
  # do local part verification for local domains, but only check the domain
  # for remote domains.
  require
    verify = recipient

  accept

acl_check_data:
  # Reject messages that have serious MIME errors.
  # This calls the demime condition again, but it
  # will return cached results.
  deny
    message = Serious MIME defect detected ($demime_reason)
    demime = *
    condition = ${if >{$demime_errorlevel}{2}{1}{0}}

  # Reject messages containing malware (runs virus scanner defined in "av_scanner")
  deny
     message = This message contains malware ($malware_name)
     malware = *

  # wosc: nothing to do with virus scanning:
  # add a Message-ID if none present
  warn  condition = ${if !def:h_Message-ID: {1}}
        message = Message-ID: <E$message_id@$primary_hostname>

  # Finally accept all other messages that have
  # made it to this point
  accept

begin routers
#------------------------------------------------------------

# deliver mail to the recipient if recipient domain is a domain we
# relay for. We do not ignore any target hosts here since delivering to
# a site local or even a link local address might be wanted here, and if
# such an address has found its way into the MX record of such a domain,
# the local admin is probably in a place where that broken MX record
# could be fixed.
dnslookup_relay_to_domains:
  debug_print = "R: dnslookup_relay_to_domains for $local_part@$domain"
  driver = dnslookup
  domains = ! +local_domains : +relay_to_domains
  transport = remote_smtp
  same_domain_copy_routing = yes
  no_more

# deliver mail directly to the recipient. This router is only reached
# for domains that we do not relay for. Since we most probably can't
# have broken MX records pointing to site local or link local IP
# addresses fixed, we ignore target hosts pointing to these addresses.
dnslookup:
  debug_print = "R: dnslookup for $local_part@$domain"
  driver = dnslookup
  domains = ! +local_domains
  transport = remote_smtp
  same_domain_copy_routing = yes
  # ignore private rfc1918 and APIPA addresses
  ignore_target_hosts = 0.0.0.0 : 127.0.0.0/8 : 192.168.0.0/16 :\
                        172.16.0.0/12 : 10.0.0.0/8 : 169.254.0.0/16
  no_more

# accept postmaster for all local domains
postmaster:
    driver = redirect
    local_parts = postmaster
    domains = +local_domains
    data = postmaster@localhost

virtual_mailman:
  driver = redirect
  domains = dsearch;/etc/exim4/domains
  data = ${lookup{$local_part}lsearch*{/etc/exim4/domains/$domain}}
  user = Debian-exim
  group = Debian-exim
  file_transport = address_file
  pipe_transport = address_pipe
  local_part_suffix = +*
  local_part_suffix_optional

# translates foo@bar.com to mb-foo.bar.com@VIRTUAL_MAILBOX_HOSTNAME
virtual_main:
  debug_print = "R: virtual_main for $local_part@$domain"
  driver = redirect

  domains = ! VIRTUAL_MAILBOX_HOSTNAME : +local_domains

  # if lookup fails, try to look up the local_part "*" as a catch-all
  data = ${lookup mysql{SELECT IF(instr(action, "@"), action, concat(action, "@", "VIRTUAL_MAILBOX_HOSTNAME")) FROM mailboxes, domains WHERE \
           mailboxes.domain_id = domains.id AND domains.name ="$domain" \
           AND local_part="$local_part"}{$value} \
         {${lookup mysql{SELECT action FROM mailboxes, domains WHERE \
           mailboxes.domain_id = domains.id AND domains.name="$domain" \
           AND local_part="*"}{$value}fail}}}

  # allow username-detail@domain.name
  local_part_suffix = +*
  local_part_suffix_optional


system_aliases:
  debug_print = "R: system_aliases for $local_part@$domain"
  driver = redirect
  domains = localhost: $primary_hostname : VIRTUAL_MAILBOX_HOSTNAME
  allow_fail
  allow_defer
  data = ${lookup{$local_part}lsearch{/etc/aliases}}

virtual_spamcheck:
  driver = accept
  domains = VIRTUAL_MAILBOX_HOSTNAME
  # we must not alter the address, so no local_part_prefix here
  # (we check that in the mysql query instead)

  # When to scan a message :
  # it isn't already scanned
  # the address is a virtual mailbox (begins with mb-)
  # local_part is found in DB with spamfilter enabled
  condition = ${if and { \
                {!eq {$received_protocol}{spam-scanned}} \
                {eq {${substr_0_3:$local_part}}{mb-}} \
                {!eq {${lookup mysql{SELECT id FROM mailboxes WHERE CONCAT("mb-", dotted_address) = "$local_part" \
                                     AND has_mailbox = 1 AND has_spamfilter = 1}{$value}{NONE}}} \
                     {NONE}} \
              } {1}{0}}

  transport = spamcheck

virtual_mailbox_bypassfilter:
  driver = accept
  domains = VIRTUAL_MAILBOX_HOSTNAME
  local_part_prefix = mbreal-
  condition = ${lookup mysql{SELECT id FROM mailboxes WHERE dotted_address = "$local_part" \
                             AND has_mailbox = 1}}

  transport = virtual_maildir

virtual_mailbox_filter:
  driver = redirect
  domains = VIRTUAL_MAILBOX_HOSTNAME
  local_part_prefix = mb-
  condition = ${lookup mysql{SELECT id FROM mailboxes WHERE dotted_address = "$local_part" \
                             AND has_mailbox = 1}}

  require_files = /var/mail/$local_part/filter
  file = /var/mail/$local_part/filter

  allow_filter
  router_home_directory = /var/mail/$local_part/Maildir

  no_verify
  no_expn

  file_transport = virtual_maildir_filter
  pipe_transport = address_pipe
  reply_transport = address_reply
  user = Debian-exim

  skip_syntax_errors
  syntax_errors_to = mbreal-$local_part@$domain
  syntax_errors_text = \
    This is an automatically generated message. An error has\n\
    been found in your .forward file. Details of the error are\n\
    reported below. While this error persists, you will receive\n\
    a copy of this message for every message that is addressed\n\
    to you. If your .forward file is a filter file, or if it is\n\
    a non-filter file containing no valid forwarding addresses,\n\
    a copy of each incoming message will be put in your normal\n\
    mailbox. If a non-filter file contains at least one valid\n\
    forwarding address, forwarding to the valid addresses will\n\
    happen, and those will be the only deliveries that occur.

virtual_killspam:
  driver = accept
  domains = VIRTUAL_MAILBOX_HOSTNAME
  local_part_prefix = mb-
  # only accept if
  # the message is classified as spam
  # local_part is found in DB
  # spamfilter is enabled
  condition = ${if and { \
                {eq {$header_X-Spam-Flag:}{YES}} \
                {!eq {${lookup mysql{SELECT id FROM mailboxes WHERE dotted_address = "$local_part" \
                                     AND has_mailbox = 1 AND has_spamfilter = 1}{$value}{NONE}}} \
		     {NONE}} \
              } {1}{0}}

  transport = virtual_killspam

virtual_mailbox_withoutfilter:
  driver = accept
  domains = VIRTUAL_MAILBOX_HOSTNAME
  local_part_prefix = mb-
  condition = ${lookup mysql{SELECT id FROM mailboxes WHERE dotted_address = "$local_part" \
                             AND has_mailbox = 1}}

  transport = virtual_maildir

virtual_vacation:
  driver = accept
  domains = VIRTUAL_MAILBOX_HOSTNAME
  local_part_prefix = vacation-
  # must look like this: vacation-MAILBOX.ID
  condition = ${lookup mysql{SELECT id FROM mailboxes WHERE id=$local_part AND has_vacation = 1}}

  transport = virtual_vacation

begin transports
#------------------------------------------------------------
virtual_maildir:
  debug_print = "T: maildir_virtual for $local_part@$domain"
  driver = appendfile
  directory = /var/mail/$local_part/Maildir
  delivery_date_add
  envelope_to_add
  return_path_add
  maildir_format
  group = Debian-exim
  mode = 0660

virtual_maildir_filter:
  debug_print = "T: maildir_virtual_filter for $local_part@$domain"
  driver = appendfile
  delivery_date_add
  envelope_to_add
  return_path_add
  maildir_format
  group = Debian-exim
  mode = 0660

virtual_killspam:
  debug_print = "T: spam_virtual for $local_part@$domain"
  driver = appendfile
  directory = /var/mail/$local_part/Maildir/.Spam
  delivery_date_add
  envelope_to_add
  return_path_add
  maildir_format
  group = Debian-exim
  mode = 0660

spamcheck:
  debug_print = "T: spamassassin_pipe for $local_part@$domain"
  driver = pipe
  use_bsmtp
  # cut off "mb-" to get the username
  command = /usr/bin/spamc -u ${substr_3:$local_part} -B -e /usr/sbin/exim4 -oMr spam-scanned -bS
  return_fail_output
  home_directory = "/tmp"
  current_directory = "/tmp"
  user = Debian-exim
  group = Debian-exim
  message_prefix =
  message_suffix =

virtual_vacation:
  driver = autoreply
  from = ${lookup mysql{SELECT CONCAT(mailboxes.local_part, "@", domains.name) FROM mailboxes, domains WHERE \
           mailboxes.domain_id = domains.id AND mailboxes.id="$local_part"}{$value} \
           {Autoresponder <postmaster@$primary_hostname>}}
  subject = ${lookup mysql{SELECT vacation_subject FROM mailboxes WHERE id=$local_part}{$value} \
            {[automatic] Unavailable by email}}
  text = ${lookup mysql{SELECT vacation_body FROM mailboxes WHERE id=$local_part}{$value} \
         {The person you've tried to reach is currently unavailable by email.}}

  headers = "MIME-Version: 1.0\nContent-Type: text/plain; charset=iso-8859-1"
  #to = $reply_address
  # don't honor reply-to because it wreaks havoc with mailman lists who rewrite reply-to
  to = $h_From:
  once = /var/mail/autoreply/$local_part.db
  once_repeat = 2w

# This transport is used for handling deliveries directly to files that are
# generated by aliasing or forwarding.
address_file:
  debug_print = "T: address_file for $local_part@$domain"
  driver = appendfile
  delivery_date_add
  envelope_to_add
  return_path_add

# This transport is used for handling pipe deliveries generated by alias or
# .forward files. If the commands fails and produces any output on standard
# output or standard error streams, the output is returned to the sender
# of the message as a delivery error.
# You can set different transports for aliases and forwards if you want to
# - see the references to address_pipe in the routers section above.
address_pipe:
  debug_print = "T: address_pipe for $local_part@$domain"
  driver = pipe
  return_fail_output
  # mlmmj needs return path
  return_path_add

# This transport is used for handling autoreplies generated by the filtering
# option of the userforward router.
address_reply:
  debug_print = "T: autoreply for $local_part@$domain"
  driver = autoreply

address_directory:
  debug_print = "T: address_directory for $local_part@$domain"
  driver = appendfile
  envelope_to_add = true
  return_path_add = true
  check_string = ""
  escape_string = ""
  maildir_format

# This transport is used for delivering messages over SMTP connections.
remote_smtp:
  debug_print = "T: remote_smtp for $local_part@$domain"
  driver = smtp
  dkim_domain = ${sender_address_domain}
  dkim_selector = pharos2014
  dkim_private_key = ${lookup mysql{SELECT dkim_private_key FROM domains WHERE name="$dkim_domain"}{$value}{}}
  dkim_canon = relaxed

begin retry
#------------------------------------------------------------

# This single retry rule applies to all domains and all errors. It specifies
# retries every 15 minutes for 2 hours, then increasing retry intervals,
# starting at 1 hour and increasing each time by a factor of 1.5, up to 16
# hours, then retries every 6 hours until 4 days have passed since the first
# failed delivery.

# Please note that these rules only limit the frequency of retries, the
# effective retry-time depends on the frequency of queue-running, too.
# See QUEUEINTERVAL in /etc/default/exim4.

# Domain               Error       Retries
# ------               -----       -------

*                      *           F,2h,15m; G,16h,1h,1.5; F,4d,6h

begin rewrite
#------------------------------------------------------------
*@localhost ${lookup{${local_part}}lsearch{/etc/email-addresses}\
                       {$value}fail} Ffrs
*@$primary_hostname ${lookup{${local_part}}lsearch{/etc/email-addresses}\
                       {$value}fail} Ffrs

begin authenticators
#------------------------------------------------------------
# requires Debian-exim to be in group courier
plain_courier_authdaemon:
  driver = plaintext
  public_name = PLAIN
  server_prompts = :
  server_condition = \
    ${extract {ADDRESS} \
              {${readsocket{/var/run/courier/authdaemon/socket} \
              {AUTH ${strlen:exim\nlogin\n$auth2\n$auth3\n}\nexim\nlogin\n$auth2\n$auth3\n} }} \
              {yes} \
              fail}
  server_set_id = $auth2
  # require TLS
  server_advertise_condition = ${if eq{$tls_cipher}{}{}{*}}

login_courier_authdaemon:
  driver = plaintext
  public_name = LOGIN
  server_prompts = Username:: : Password::
  server_condition = \
    ${extract {ADDRESS} \
              {${readsocket{/var/run/courier/authdaemon/socket} \
              {AUTH ${strlen:exim\nlogin\n$auth1\n$auth2\n}\nexim\nlogin\n$auth1\n$auth2\n} }} \
              {yes} \
              fail}
  server_set_id = $auth1
  # require TLS
  server_advertise_condition = ${if eq{$tls_cipher}{}{}{*}}
